{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const originPage = Page;\nconst originComponent = Component;\n\nconst originProperties = ['data', 'properties', 'options'];\nconst originMethods = [\n  'onLoad',\n  'onReady',\n  'onShow',\n  'onHide',\n  'onUnload',\n  'onPullDownRefresh',\n  'onReachBottom',\n  'onShareAppMessage',\n  'onPageScroll',\n  'onTabItemTap'\n];\n\nfunction merge(mixins, config) {\n  if (!Array.isArray(mixins)) return;\n  mixins.forEach(mixinItem => {\n    if (Object.prototype.toString.call(mixinItem) !== '[object Object]') {\n      throw new Error(`mixin type must be Object`);\n    }\n    for (let [key, value] of Object.entries(mixinItem)) {\n      if (originProperties.includes(key)) {\n        config[key] = { ...value, ...config[key] };\n      } else if (originMethods.includes(key)) {\n        const originFunction = config[key];\n        config[key] = function(...args) {\n          value.call(this, ...args);\n          return originFunction && originFunction.call(this, ...args);\n        };\n      } else {\n        config = { ...config, ...mixinItem };\n      }\n    }\n  });\n  return config;\n}\n\nPage = config => {\n  const { mixins } = config;\n  if (Array.isArray(mixins)) {\n    delete config.mixins;\n    config = merge(mixins, config);\n  }\n  originPage(config);\n};\n\nComponent = config => {\n  if (!config.methods) {\n    config.methods = {};\n  }\n  originComponent(config);\n};\n"]}